// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"A32hKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
