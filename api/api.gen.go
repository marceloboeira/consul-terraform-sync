// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {
	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewProvider defines model for NewProvider.
type NewProvider struct {
	Name              string               `json:"name"`
	Source            string               `json:"source"`
	TerraformProvider *[]TerraformProvider `json:"terraform_provider,omitempty"`
	Version           string               `json:"version"`
}

// NewTask defines model for NewTask.
type NewTask struct {
	BufferPeriod *[]struct {
		Enabled *bool   `json:"enabled,omitempty"`
		Max     *string `json:"max,omitempty"`
		Min     *string `json:"min,omitempty"`
	} `json:"buffer_period,omitempty"`
	Condition *[]struct {
		CatalogServices *CatalogServicesCondition     `json:"catalog-services,omitempty"`
		ConsulKv        *ConsulKvCondition            `json:"consul-kv,omitempty"`
		Schedule        *ScheduleCondition            `json:"schedule,omitempty"`
		Services        *ServicesConditionSourceInput `json:"services,omitempty"`
	} `json:"condition,omitempty"`
	Description *string   `json:"description,omitempty"`
	Enabled     *bool     `json:"enabled,omitempty"`
	Name        string    `json:"name"`
	Providers   *[]string `json:"providers,omitempty"`
	Services    *[]string `json:"services,omitempty"`
	Source      string    `json:"source"`
	SourceInput *[]struct {
		ConsulKv *ConsulKvSourceInput          `json:"consul-kv,omitempty"`
		Services *ServicesConditionSourceInput `json:"services,omitempty"`
	} `json:"source_input,omitempty"`
	VariableFiles *[]string `json:"variable_files,omitempty"`
	Version       string    `json:"version"`
	WorkingDir    *string   `json:"working_dir,omitempty"`
}

// CatalogServicesCondition defines model for catalog-services-condition.
type CatalogServicesCondition []struct {
	Namespace         *string                            `json:"namespace,omitempty"`
	NodeMeta          *CatalogServicesCondition_NodeMeta `json:"node_meta,omitempty"`
	Regexp            *string                            `json:"regexp,omitempty"`
	SourceIncludesVar *bool                              `json:"source_includes_var,omitempty"`
}

// CatalogServicesCondition_NodeMeta defines model for CatalogServicesCondition.NodeMeta.
type CatalogServicesCondition_NodeMeta struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ConsulKvCondition defines model for consul-kv-condition.
type ConsulKvCondition []struct {
	Datacenter        *string `json:"datacenter,omitempty"`
	Namespace         *string `json:"namespace,omitempty"`
	Path              *string `json:"path,omitempty"`
	Recurse           *bool   `json:"recurse,omitempty"`
	SourceIncludesVar *bool   `json:"source_includes_var,omitempty"`
}

// ConsulKvSourceInput defines model for consul-kv-source-input.
type ConsulKvSourceInput []struct {
	Datacenter *string `json:"datacenter,omitempty"`
	Namespace  *string `json:"namespace,omitempty"`
	Path       *string `json:"path,omitempty"`
	Recurse    *bool   `json:"recurse,omitempty"`
}

// ScheduleCondition defines model for schedule-condition.
type ScheduleCondition []struct {
	Cron *string `json:"cron,omitempty"`
}

// ServicesConditionSourceInput defines model for services-condition-source-input.
type ServicesConditionSourceInput []struct {
	Regexp *string `json:"regexp,omitempty"`
}

// TerraformProvider defines model for terraform_provider.
type TerraformProvider map[string]interface{}

// CreateProviderJSONBody defines parameters for CreateProvider.
type CreateProviderJSONBody NewProvider

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody NewTask

// CreateTaskParams defines parameters for CreateTask.
type CreateTaskParams struct {
	// different modes for running. Inspect returns a plan and does not commit the task, now runs the task immediately
	Run *CreateTaskParamsRun `json:"run,omitempty"`
}

// CreateTaskParamsRun defines parameters for CreateTask.
type CreateTaskParamsRun string

// CreateProviderJSONRequestBody defines body for CreateProvider for application/json ContentType.
type CreateProviderJSONRequestBody CreateProviderJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// Getter for additional properties for CatalogServicesCondition_NodeMeta. Returns the specified
// element and whether it was found
func (a CatalogServicesCondition_NodeMeta) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CatalogServicesCondition_NodeMeta
func (a *CatalogServicesCondition_NodeMeta) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CatalogServicesCondition_NodeMeta to handle AdditionalProperties
func (a *CatalogServicesCondition_NodeMeta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CatalogServicesCondition_NodeMeta to handle AdditionalProperties
func (a CatalogServicesCondition_NodeMeta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new provider
	// (POST /provider)
	CreateProvider(w http.ResponseWriter, r *http.Request)
	// Returns all tasks
	// (GET /task)
	GetTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /task)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /task/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Returns a task by name
	// (GET /task/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateProvider operation middleware
func (siw *ServerInterfaceWrapper) CreateProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProvider(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/provider", wrapper.CreateProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task", wrapper.GetTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/task", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/task/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYXW/bNhf+KwTf96qQrTRdhsJXS9NiCLB1xZK7zjCOxWObjUSqJGXHCPzfh0NKsr4c",
	"O20XtBsKNLZ0vvg8Dw95/MATneVaoXKWTx64TVaYgf/4zhht6ENudI7GSfSPEy2Q/gq0iZG5k1rxSTBm",
	"/l3EF9pk4PiES+VenfOIu22O4Ssu0fBdxDO0FpYHA1Wva1frjFRLvttF3ODnQhoUfPKRlwkr8+ku4u9x",
	"88HotRQ4ULyCzOfEe8jylALDxvazRNzqwiQd0xXYlUy0yeMDTg6NAVr8LG9UIB1mPvn/DS74hP8v3kMe",
	"l3jHA667OgMYA1v6vkZjPUzNsl6NL34enx2Fyi+9Xtg+1rR21PNPmDgeMLwFe9fKQ8wrIQNNHx94Ag5S",
	"vRxZNGuZELwfH7jBJd7nfMLHL/huuptGHXZ5xFHBPKWSnCkwKhnhDuzdJY94tXoKN414Izjf4JxHHHJJ",
	"JVf8cG2WcVljnGlRpH5tYCRlmS1kimWoGjv+cnw2PqNltrUxLxYLNLMcjdSiRVzbrl5AA5ywlhLHudYp",
	"gvIyh/s2WReDwslkh9PzMztIaI+prkIaHB1cQJ+5x7XZtR/tk4SMtkhHd+ujYSrDtj+99rQdca/sOt4n",
	"rqFf+yhIaCRVXrjTwG1pudVEFCu/MBLyEMVPUU2/S1Xboxe2sV8a9qT3mvx+m+osq4lh7bWP1d54x6MN",
	"dM7BTXqg584CIY/I9+mCa1P9zKrpNqMv5mmw+4dmNoDmRps7qZYzIU3bYxzbrUpGJCkb0/+j8mj4dufH",
	"Ix3jMK+UwObQ1Y7ABRSpG1qi0gJnGTogDxAhA6QfWmH7O3F/ot3hlk/4GtIC+RCV1XHWrGeD8/GLR+Wb",
	"pIVAO1tDG/gFpHZgu5/Y1Xut8zCQAhwkqBx2iBfJy0EUn4x7Dm7VNs62I8JywNZgUhiLpyDxTBC2dvC/",
	"D8VTwBg4Sx/pt6bbc16w8O93rb7slnKsrx4u5gk78pRChm/sHTeKJNVCl4ePg8RXiBnIlILl0iFkv9gN",
	"LJdoxlLz+lp7E56xyw/X7BYh4xEvDDmtnMsncdzw6d4v+KVikEu20IZd3d7wiKcyQRVEUIa/zCFZITv3",
	"J8A+sJ3E8WazGYN/PabTt/S18W/XV+/e37wbnY/PxiuXpSUKmf1jcRNYGaou9iYxgSydB/3q9oZWxQcv",
	"1jpHRfcFGk7C8URi9wTGTaBzbV1/BLwyCA4tA6Zwwyr7v0hrJAUgs2tRG9bTXjiv0Lo3WmwrslD5DJDn",
	"qUy8a/zJBkGHU/7YHaA5T3optIulOYk5zUAI3jww6W7nN67NNQFPac7Pzp6rLDrXWZU8aCs0om+VP/w6",
	"MJC5UHifY+JQMCxtIm6LLAOzPUguCQuWfsyrH03J0V9QqJYlDijlT3SFUZZBmvqLtx0Qya/oiCPLv5KM",
	"k8b4anDutZofiKEeqA1yPBtTOrxO2LlkfHDX3oY5KQcDGbow8HfDCUkTOSrHMi3Q+lZoCqWkWo7ZtbK0",
	"CGaqclmegmKgBBMaLVPasURnmXTMrcJcFjGlNxTB1o+YzDIUEhymW18rTeL8c4Fmu+/ipqA3e9RRFRmh",
	"IUMJZKg3A8PRbvqPtaSgsu+qHR0q6QdpRdXg3lZ61YLiB9LCLkg+RTfwy2V4TuGsVMvypwA2B4uCaeUV",
	"RzGqnid6G+OtD0Awvtm+D9PWo9vDR9OLkMdpVhZWathfL2sJl9NbWxAtTR/7rSGIuSWfn/og+FpCIeJ7",
	"4vptTU5gZcuqobfb2b72oPky7gw6I3H9nOz9tzd/zegRQezKcaWisXV9T3UC6UpbN3l9cfGa76a7vwMA",
	"AP//KqLk9VAZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
