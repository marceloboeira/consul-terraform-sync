// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {
	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewTask defines model for NewTask.
type NewTask struct {
	BufferPeriod *[]struct {
		Enabled *bool   `json:"enabled,omitempty"`
		Max     *string `json:"max,omitempty"`
		Min     *string `json:"min,omitempty"`
	} `json:"buffer_period,omitempty"`
	Condition *[]struct {
		CatalogServices *CatalogServicesCondition     `json:"catalog-services,omitempty"`
		ConsulKv        *ConsulKvCondition            `json:"consul-kv,omitempty"`
		Schedule        *ScheduleCondition            `json:"schedule,omitempty"`
		Services        *ServicesConditionSourceInput `json:"services,omitempty"`
	} `json:"condition,omitempty"`
	Description *string   `json:"description,omitempty"`
	Enabled     *bool     `json:"enabled,omitempty"`
	Name        string    `json:"name"`
	Providers   *[]string `json:"providers,omitempty"`
	Services    *[]string `json:"services,omitempty"`
	Source      string    `json:"source"`
	SourceInput *[]struct {
		ConsulKv *ConsulKvSourceInput          `json:"consul-kv,omitempty"`
		Services *ServicesConditionSourceInput `json:"services,omitempty"`
	} `json:"source_input,omitempty"`
	VariableFiles *[]string `json:"variable_files,omitempty"`
	Version       string    `json:"version"`
	WorkingDir    *string   `json:"working_dir,omitempty"`
}

// CatalogServicesCondition defines model for catalog-services-condition.
type CatalogServicesCondition []struct {
	Namespace         *string                            `json:"namespace,omitempty"`
	NodeMeta          *CatalogServicesCondition_NodeMeta `json:"node_meta,omitempty"`
	Regexp            *string                            `json:"regexp,omitempty"`
	SourceIncludesVar *bool                              `json:"source_includes_var,omitempty"`
}

// CatalogServicesCondition_NodeMeta defines model for CatalogServicesCondition.NodeMeta.
type CatalogServicesCondition_NodeMeta struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ConsulKvCondition defines model for consul-kv-condition.
type ConsulKvCondition []struct {
	Datacenter        *string `json:"datacenter,omitempty"`
	Namespace         *string `json:"namespace,omitempty"`
	Path              *string `json:"path,omitempty"`
	Recurse           *bool   `json:"recurse,omitempty"`
	SourceIncludesVar *bool   `json:"source_includes_var,omitempty"`
}

// ConsulKvSourceInput defines model for consul-kv-source-input.
type ConsulKvSourceInput []struct {
	Datacenter *string `json:"datacenter,omitempty"`
	Namespace  *string `json:"namespace,omitempty"`
	Path       *string `json:"path,omitempty"`
	Recurse    *bool   `json:"recurse,omitempty"`
}

// ScheduleCondition defines model for schedule-condition.
type ScheduleCondition []struct {
	Cron *string `json:"cron,omitempty"`
}

// ServicesConditionSourceInput defines model for services-condition-source-input.
type ServicesConditionSourceInput []struct {
	Regexp *string `json:"regexp,omitempty"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody NewTask

// CreateTaskParams defines parameters for CreateTask.
type CreateTaskParams struct {
	// different modes for running. Inspect returns a plan and does not commit the task, now runs the task immediately
	Run *CreateTaskParamsRun `json:"run,omitempty"`
}

// CreateTaskParamsRun defines parameters for CreateTask.
type CreateTaskParamsRun string

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// Getter for additional properties for CatalogServicesCondition_NodeMeta. Returns the specified
// element and whether it was found
func (a CatalogServicesCondition_NodeMeta) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CatalogServicesCondition_NodeMeta
func (a *CatalogServicesCondition_NodeMeta) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CatalogServicesCondition_NodeMeta to handle AdditionalProperties
func (a *CatalogServicesCondition_NodeMeta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CatalogServicesCondition_NodeMeta to handle AdditionalProperties
func (a CatalogServicesCondition_NodeMeta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all tasks
	// (GET /task)
	GetTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /task)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Deletes a task by name
	// (DELETE /task/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Returns a task by name
	// (GET /task/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task", wrapper.GetTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/task", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/task/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY32/bNhD+V4jbngrZStMVKPS0NC2GAFtXLHnrAuMsnmU2EqmSlB2j8P8+HCn/kKXY",
	"SToUxYYAiS3dHY/f9x15l6+Qm6o2mrR3kH0Fl8+pwvDxvbXG8ofampqsVxQe50YS/5Xkcqtqr4yGLBqL",
	"8C6BmbEVeshAaf/qHBLwq5riVyrIwjqBipzD4sFAm9dbV+et0gWs1wlY+tIoSxKyT9AuuDG/XSfwgZY3",
	"6O44Mt1jVZdhkRw9lqYYObILlcedWCrovoYMxi84pW4ekABpnJa8jrcNJaCx4kw8ursLSBiVhZJkHWSf",
	"bhPYBf4ES5pCAlgr4BemsTk7GlukbUZpZWRTcuYLtIpXmcxUSW2oBVkXk3g5PhufcW5dCqbNbEZ2UpNV",
	"RvID5alyfaq2G9iDIu6lRXVqTEmoAyF437GD166PfgKV0l2z8zM3yFL7xEw/U+5h9wCtxRV/z42WKoL9",
	"4AaGWPvZ0gwy+CndCTdtVZse2o92i8QVXVOO7hYnw2wMu/78OtB2wn1jd+D9yD30cx9FCY2Urhv/OHA7",
	"Wt6nC7VovwgW8hDFT1FNrIn9BTbl0Qu7Vy979qz3Lfk9n8Nt7WO49drF6hbe6WhtZe6nP1ikvUjRcxIJ",
	"OSLfpwuuS/V3Vs3hYfRsnrYn2D608TAbQHNp7J3SxUQq2/UYp26l8xFLyqX8exT0dupSaI1aenfZ3A5A",
	"cOTEeJhXXsDVeKgdSTNsSj+0RW0kTSryyB4o4wpYfuyE7Vfi7v66oxVksMCyIRiicnOX7eezpOn4xVH5",
	"5mUjyU0W2AV+hqUbKPdHnuq9o/NhICV6zEl7OiBe5i8HUXwy7jX6ede4Wo0YywFbS3ljHT0Gie8EYaeC",
	"/3soPgaMgbv0yHlrD8+cFyL+/GH087qUU+fqw8k8oSJPJ8ImSs9Me6t4zMPSVKEq2apWnrD61S2xKMiO",
	"lYFtv3odn4mLj1fihrCCBBrLTnPv6yxN93x6TfCFFlgrMTNWXN5cQwKlyklHdtvwFzXmcxLn4WjfBXZZ",
	"mi6XyzGG12O+Vltfl/5+dfn+w/X70fn4bDz3VRm2S7Zyf86uI9xD2aXBJGX0lA9oXt5c865gsGM2NWlu",
	"BDJ41d47rOLATLhK+ENBvj+A/EW+sdoJLMvQIrm/WTrMLLLFlYQMfiPPMwZ3vpZcbXhbHOn87GzDEOkQ",
	"G+u6VHnwTD+7KM94Z3ekc+xq3ww0g6Lo5s75ik1Gkc5Y1E9J6lgucSYcWLnRdF9T7kkKam0ScE1VoV0N",
	"gco0YhGmpcAGT261cQN8XFpCT06g0LQMzgOERKOb2NHWaLEiH0ezw3BS8exE2ovKSHJB27bRWuliLK60",
	"400Iu0lX1CVqgVoKacgJbbzITVUpL/w8dtCJ0GbJEdz2kVBVRVKhp3IVcuWZCb40ZFe7srQNv9mhTrqp",
	"GA0VU2BDsxxoY9e3sdkh598aufrXmN2qrM8tPxfeCJQS9jstHgrW31gBz0zphxV6X619pa+TeASlX1kL",
	"6yj5kvzAf0Picw7nlC7aoU1M0ZEURgfFcQzRDleyVxjvQgCG8e3qQ+yLj5ZHiGZmcR1vRJtYq+HQCGwl",
	"3PbZXUF0NH1qKoxi7sjnlz4IIZeYiPyRuH63JSeyshKb8eTwZPvWi+Z53FnyVtHie7L3/y7+LaMnBLFu",
	"G8sNjZ1+rDQ5lnPjfPbm9es3sL5d/xMAAP//VsYD+qQVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
